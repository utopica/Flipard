@using Flipard.MVC.ViewModels

@model HomeCreateSetViewModel

@{
    ViewData["Title"] = "Flashcards";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var antiforgery = Html.AntiForgeryToken();
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="~/css/displayPage.css">
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.3.0/uicons-bold-straight/css/uicons-bold-straight.css'>
</head>
<body>
    @antiforgery
    <content>
        <div class="deck-card">
            <div class="deck-card-header">
                <h5>@Model.Name</h5>
            </div>
            
            <button type="button" class="deck-delete-button" onclick="deleteDeck('@Model.Id')">
                Delete Set
            </button>
        </div>

        <div class="display-card">
            <button type="button" class="card-button" id="previous-button" onclick="showPreviousCard()">
                <span class="button-text">
                    <i class="fi fi-bs-angle-left"></i>
                </span>
            </button>

            <div class="current-card" id="current-card" onclick="flipCard()">
                <div class="term">@Model?.TermMeanings?.FirstOrDefault()?.Term ?? "No term available"</div>
                <div class="meaning">@Model?.TermMeanings?.FirstOrDefault()?.Meaning ?? "No meaning available"</div>
            </div>

            <button type="button" class="card-button" id="next-button" onclick="showNextCard()">
                <span class="button-text">
                    <i class="fi fi-bs-angle-right"></i>
                </span>
            </button>
        </div>

        @if (Model?.TermMeanings != null)
        {
            <div class="card-list">
                @for (var i = 0; i < Model.TermMeanings.Count; i++)
                {
                    var card = Model.TermMeanings[i];
                    <div class="card-edit-bar">
                        <span class="card-number">@(i + 1)</span>
                        <div>
                            <button type="button" class="card-delete-button" data-card-id="@card.Id" onclick="deleteCard(this)">
                                <span class="button-card-delete-icon">
                                    <i class="fi fi-sr-trash"></i>
                                </span>
                            </button>

                            <button type="button" class="card-edit-button">
                                <span class="button-card-edit-icon">
                                    <i class="fi fi-sr-pencil"></i>
                                </span>
                            </button>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-term-meaning">
                            <div class="card-term">
                                <h5>@card.Term</h5>
                            </div>
                            <div class="card-meaning">
                                <text>@card.Meaning</text>
                            </div>
                        </div>

                        <div class="card-image">
                            @if (!string.IsNullOrEmpty(card.ImageUrl))
                            {
                                <img class="image-preview" src="@card.ImageUrl" />
                            }

                            @if (string.IsNullOrEmpty(card.ImageUrl))
                            {
                                <span class="button-text">
                                    <i class="fi fi-sr-add-image"></i>
                                </span>
                            }

                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No cards available</p>
        }
    </content>

    <script type="text/javascript">
        var currentIndex = 0;
        var cards = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.TermMeanings ?? new List<TermMeaningViewModel>()));
        var showingTerm = true;

        function showCard(index) {
            if (index >= 0 && index < cards.length) {
                currentIndex = index;
                document.querySelector("#current-card .term").innerText = cards[currentIndex].Term;
                document.querySelector("#current-card .meaning").innerText = cards[currentIndex].Meaning;
                showTerm();
            }
        }

        function showTerm() {
            document.querySelector("#current-card").classList.remove("flipped");
            showingTerm = true;
        }

        function showMeaning() {
            document.querySelector("#current-card").classList.add("flipped");
            showingTerm = false;
        }

        function flipCard() {
            if (showingTerm) {
                showMeaning();
            } else {
                showTerm();
            }
        }

        function showPreviousCard() {
            if (currentIndex > 0) {
                showCard(currentIndex - 1);
            }
        }

        function showNextCard() {
            if (currentIndex < cards.length - 1) {
                showCard(currentIndex + 1);
            }
        }

        function deleteCard(button) {
            var cardId = button.getAttribute("data-card-id");

            fetch(`/Flashcards/DeleteCard/${cardId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        button.closest('.card-edit-bar').nextElementSibling.remove();
                        button.closest('.card-edit-bar').remove();
                    } else {
                        alert('Failed to delete card.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the card.');
                });
        }

        function deleteDeck(deckId) {
            fetch(`/Flashcards/DeleteDeck/${deckId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/Home/Index'; 
                    } else {
                        alert('Failed to delete deck.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the deck.');
                });
        }


        document.addEventListener("DOMContentLoaded", function () {
            showCard(currentIndex);
        });
    </script>
</body>
</html>
