@using Flipard.MVC.ViewModels.Home

@model Flipard.MVC.ViewModels.Home.HomeCreateSetViewModel

@{
    ViewData["Title"] = "Flashcards";
    Layout = "_Layout";
    var antiforgery = Html.AntiForgeryToken();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/flashcards/display-page.css">
</head>
<style>

</style>
<body>
@antiforgery
<content>
    <div class="deck-card">
        <div class="deck-card-header">
            <h5>@Model.Name</h5>
        </div>

        <div class="deck-buttons">

            <button type="button" class="deck-quiz-button" onclick="redirectToQuiz('@Model.Id')">
                Quiz
            </button>

            @if (!Model.IsReadOnly)
            {
                <button type="button" class="deck-delete-button" onclick="deleteDeck('@Model.Id')">
                    Delete Set
                </button> //todo: ask "do you want to permanently delete this set"
            }

            <button type="button" class="deck-settings-button" onclick="setQuizOptions('@Model.Id')">
                <i class="fa-solid fa-gear"></i>
            </button>

        </div>
    </div>

    <div class="display-card">
        <button type="button" class="card-button" id="previous-button" onclick="showPreviousCard()">
            <span class="button-text">
                <i class="fa-solid fa-angle-left"></i>
            </span>
        </button>

        <div class="current-card" id="current-card" onclick="flipCard()">
            <div class="term">@Model?.TermMeanings?.FirstOrDefault()?.Term ?? "No term available"</div>
            <div class="meaning">@Model?.TermMeanings?.FirstOrDefault()?.Meaning ?? "No meaning available"</div>
        </div>

        <button type="button" class="card-button" id="next-button" onclick="showNextCard()">
            <span class="button-text">
                <i class="fa-solid fa-angle-right"></i>
            </span>
        </button>
    </div>

    @if (Model?.TermMeanings != null)
    {
        @for (var i = 0; i < Model.TermMeanings.Count; i++)
        {
            var card = Model.TermMeanings[i];
            <div class="card-list">
                <div class="card-edit-bar">
                    <span class="card-number">@(i + 1)</span>
                    <div class="card-edit-buttons">
                        @if (!Model.IsReadOnly)
                        {
                            <button type="button" class="card-delete-button" data-card-id="@card.Id" onclick="deleteCard(this)">
                                <span class="button-card-delete-icon">
                                    <i class="fa-solid fa-trash"></i>
                                </span>
                            </button>

                            <button type="button" class="card-edit-button" onclick="editCard('@card.Id')">
                                <span class="button-card-edit-icon">
                                    <i class="fa-solid fa-pen"></i>
                                </span>
                            </button>

                            <button type="button" class="card-save-button" onclick="saveCard('@card.Id')" style="display: none;">
                                <span class="button-card-save-icon">
                                    <i class="fa-solid fa-floppy-disk"></i>
                                </span>
                            </button>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-term-meaning">
                        <div class="card-term">
                            <span id="card-term-display-@card.Id">@card.Term</span>
                            @if (!Model.IsReadOnly)
                            {
                                <input class="card-term" type="text" id="card-term-@card.Id" value="@card.Term" style="display: none;"/>
                            }
                        </div>
                        <div class="card-meaning">
                            <span class="card-meaning" id="card-meaning-display-@card.Id">@card.Meaning</span>
                            @if (!Model.IsReadOnly)
                            {
                                <input class="card-term" type="text" id="card-meaning-@card.Id" value="@card.Meaning" style="display: none;"/>
                            }
                        </div>
                    </div>

                    <div class="card-image">
                        @if (!string.IsNullOrEmpty(card.ImageUrl))
                        {
                            <img class="image-preview" src="@card.ImageUrl"/>
                        }

                        @if (string.IsNullOrEmpty(card.ImageUrl) && !Model.IsReadOnly)
                        {
                            <span class="button-text">
                                <i class="fi fi-tr-graphic-style"></i>
                            </span>
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No cards available</p>
    }

    @* Settings Modal *@

    <div id="quizSettingsModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Quiz Settings</h2>
                <button class="modal-close" onclick="closeQuizSettings()">×</button>
            </div>

            <div class="modal-body">
                <div class="settings-group">
                    <h3>Quiz Modes</h3>
                    <div class="settings-option">
                        <div class="toggle-option">
                            <label for="feedbackMode">Feedback Mode</label>
                            <label class="toggle-switch">
                                <input type="checkbox" id="feedbackMode">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="settings-group">
                    <h3>Questions</h3>
                    <div class="settings-option">
                        <div class="number-option">
                            <label for="questionCount">Number of Questions</label>
                            <input type="number" id="questionCount" class="number-input" min="1" value="@Model?.TermMeanings?.Count ?? 1">
                        </div>
                    </div>

                    <div class="settings-option">
                        <label>Answer With</label>
                        <div class="toggle-option">
                            <label for="answerWithTerm">Term</label>
                            <label class="toggle-switch">
                                <input type="radio" id="answerWithTerm" name="answerWith" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                        <div class="toggle-option">
                            <label for="answerWithDefinition">Definition</label>
                            <label class="toggle-switch">
                                <input type="radio" id="answerWithDefinition" name="answerWith">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>

                <h3>Question Types</h3>
                <div class="settings-option">
                    <div class="toggle-option">
                        <label for="writtenType">Written</label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="writtenType" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="toggle-option">
                        <label for="multipleChoiceType">Multiple Choice</label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="multipleChoiceType" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="toggle-option">
                        <label for="trueFalseType">True/False</label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="trueFalseType">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button class="save-button" onclick="saveQuizSettings()">Save Settings</button>
            </div>
        </div>
    </div>
</content>

<script type="text/javascript">
        var currentIndex = 0;
        var cards = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.TermMeanings ?? new List<TermMeaningViewModel>()));
        var showingTerm = true;

        function showCard(index) {
            if (index >= 0 && index < cards.length) {
                currentIndex = index;
                document.querySelector("#current-card .term").innerText = cards[currentIndex].Term;
                document.querySelector("#current-card .meaning").innerText = cards[currentIndex].Meaning;
                showTerm();
            }
        }

        function showTerm() {
            document.querySelector("#current-card").classList.remove("flipped");
            showingTerm = true;
        }

        function showMeaning() {
            document.querySelector("#current-card").classList.add("flipped");
            showingTerm = false;
        }

        function flipCard() {
            if (showingTerm) {
                showMeaning();
            } else {
                showTerm();
            }
        }

        function showPreviousCard() {
            if (currentIndex > 0) {
                showCard(currentIndex - 1);
            }
        }

        function showNextCard() {
            if (currentIndex < cards.length - 1) {
                showCard(currentIndex + 1);
            }
        }

        function deleteCard(button) {
            var cardId = button.getAttribute("data-card-id");

            fetch(`/Flashcards/DeleteCard/${cardId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        button.closest('.card-edit-bar').nextElementSibling.remove();
                        button.closest('.card-edit-bar').remove();

                        updateCardNumbers();
                    } else {
                        alert('Failed to delete card.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the card.');
                });
        }

        function updateCardNumbers() {

            var cardNumbers = document.querySelectorAll('.card-number');

            cardNumbers.forEach((number, index) => {
                number.textContent = index + 1;
            });
        }

        function deleteDeck(deckId) {
            fetch(`/Flashcards/DeleteDeck/${deckId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/Home/Index';
                    } else {
                        alert('Failed to delete deck.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the deck.');
                });
        }

        function editCard(cardId) {
            document.querySelector(`#card-term-display-${cardId}`).style.display = 'none';
            document.querySelector(`#card-meaning-display-${cardId}`).style.display = 'none';
            document.querySelector(`#card-term-${cardId}`).style.display = 'block';
            document.querySelector(`#card-meaning-${cardId}`).style.display = 'block';
            document.querySelector(`#card-term-${cardId}`).focus();
            document.querySelector(`.card-edit-bar .card-edit-button[onclick="editCard('${cardId}')"]`).style.display = 'none';
            document.querySelector(`.card-edit-bar .card-save-button[onclick="saveCard('${cardId}')"]`).style.display = 'inline-block';
        }

        function saveCard(cardId) {
            var term = document.querySelector(`#card-term-${cardId}`).value;
            var meaning = document.querySelector(`#card-meaning-${cardId}`).value;

            var updatedCard = {
                Id: cardId,
                Term: term,
                Meaning: meaning
            };

            fetch(`/Flashcards/UpdateCard`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(updatedCard)
            })
                .then(response => {
                    if (response.ok) {
                        document.querySelector(`#card-term-display-${cardId}`).innerText = term;
                        document.querySelector(`#card-meaning-display-${cardId}`).innerText = meaning;
                        document.querySelector(`#card-term-display-${cardId}`).style.display = 'block';
                        document.querySelector(`#card-meaning-display-${cardId}`).style.display = 'block';
                        document.querySelector(`#card-term-${cardId}`).style.display = 'none';
                        document.querySelector(`#card-meaning-${cardId}`).style.display = 'none';
                        document.querySelector(`.card-edit-bar .card-edit-button[onclick="editCard('${cardId}')"]`).style.display = 'inline-block';
                        document.querySelector(`.card-edit-bar .card-save-button[onclick="saveCard('${cardId}')"]`).style.display = 'none';
                    } else {
                        alert('Failed to save card.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while saving the card.');
                });
        }

        function redirectToQuiz(deckId) {
            window.location.href = '/Flashcards/CreateQuiz/' + deckId;
        }

        document.addEventListener("DOMContentLoaded", function () {
            showCard(currentIndex);
        });

        function showQuizSettings() {
            document.getElementById('quizSettingsModal').style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent scrolling of background content
        }

        function closeQuizSettings() {
            document.getElementById('quizSettingsModal').style.display = 'none';
            document.body.style.overflow = ''; // Restore scrolling
        }

        function saveQuizSettings() {
            const settings = {
                modes: {
                    feedback: document.getElementById('feedbackMode').checked
                },
                questionCount: parseInt(document.getElementById('questionCount').value),
                answerWith: document.getElementById('answerWithTerm').checked ? 'term' : 'definition',
                questionTypes: {
                    written: document.getElementById('writtenType').checked,
                    multipleChoice: document.getElementById('multipleChoiceType').checked,
                    trueFalse: document.getElementById('trueFalseType').checked,
                }
            };

            localStorage.setItem('quizSettings', JSON.stringify(settings));
            closeQuizSettings();
        }


        // Update the existing setQuizOptions function
        function setQuizOptions(deckId) {
            showQuizSettings();
        }

        // Load saved settings when the modal is opened
        document.addEventListener('DOMContentLoaded', function() {
            const savedSettings = localStorage.getItem('quizSettings');
            if (savedSettings) {
                const settings = JSON.parse(savedSettings);

                // Load Quiz Modes
                document.getElementById('feedbackMode').checked = settings.modes.feedback;

                // Load Question Count
                document.getElementById('questionCount').value = settings.questionCount;

                // Load Answer With
                document.getElementById('answerWithTerm').checked = settings.answerWith === 'term';
                document.getElementById('answerWithDefinition').checked = settings.answerWith === 'definition';

                // Load Question Types
                document.getElementById('writtenType').checked = settings.questionTypes.written;
                document.getElementById('multipleChoiceType').checked = settings.questionTypes.multipleChoice;
                document.getElementById('trueFalseType').checked = settings.questionTypes.trueFalse;
            }
        });

        document.getElementById('answerWithTerm').addEventListener('change', function(e) {
            if (e.target.checked) {
                document.getElementById('answerWithDefinition').checked = false;
            }
        });

        document.getElementById('answerWithDefinition').addEventListener('change', function(e) {
            if (e.target.checked) {
                document.getElementById('answerWithTerm').checked = false;
            }
        });

        document.addEventListener("DOMContentLoaded", function () {
            // Show the current card on load
            showCard(currentIndex);

            // Restrict the max value of question count to the number of flashcards
            const questionCountInput = document.getElementById('questionCount');
            questionCountInput.max = cards.length;
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target === document.getElementById('quizSettingsModal')) {
                closeQuizSettings();
            }
        }
        
    </script>
<script src="@Url.Content("~/js/flashcards/display-page.js")"></script>

</body>
</html>