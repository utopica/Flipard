@using Flipard.MVC.ViewModels.Home

@model Flipard.MVC.ViewModels.Home.HomeCreateSetViewModel

@{
    ViewData["Title"] = "Flashcards";
    Layout = "_Layout";
    var antiforgery = Html.AntiForgeryToken();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/flashcards/display-page.css">
</head>
<style>

</style>
<body>
@antiforgery
<content>
    <div class="deck-card">
        <div class="deck-card-header">
            <h5>@Model.Name</h5>
        </div>

        <div class="deck-buttons">

            <button type="button" class="deck-quiz-button" onclick="redirectToQuiz('@Model.Id')">
                Quiz
            </button>

            @if (!Model.IsReadOnly)
            {
                <button type="button" class="deck-delete-button" onclick="deleteDeck('@Model.Id')">
                    Delete Set
                </button> //todo: ask "do you want to permanently delete this set"
            }

            <button type="button" class="deck-settings-button" onclick="setQuizOptions('@Model.Id')">
                <i class="fa-solid fa-gear"></i>
            </button>

        </div>
    </div>

    <div class="display-card">
        <button type="button" class="card-button" id="previous-button" onclick="showPreviousCard()">
            <span class="button-text">
                <i class="fa-solid fa-angle-left"></i>
            </span>
        </button>

        <div class="current-card" id="current-card" onclick="flipCard()">
            <div class="term">@Model?.TermMeanings?.FirstOrDefault()?.Term ?? "No term available"</div>
            <div class="meaning">@Model?.TermMeanings?.FirstOrDefault()?.Meaning ?? "No meaning available"</div>
        </div>

        <button type="button" class="card-button" id="next-button" onclick="showNextCard()">
            <span class="button-text">
                <i class="fa-solid fa-angle-right"></i>
            </span>
        </button>
    </div>

    <div class="card-list" id="card-list">
        @* Card list will be inserted here. *@
    </div>
    
    @* Settings Modal *@

    <div id="quizSettingsModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Quiz Settings</h2>
                <button class="modal-close" onclick="closeQuizSettings()">×</button>
            </div>

            <div class="modal-body">
                <div class="settings-group">
                    <h3>Quiz Modes</h3>
                    <div class="settings-option">
                        <div class="toggle-option">
                            <label for="feedbackMode">Feedback Mode</label>
                            <label class="toggle-switch">
                                <input type="checkbox" id="feedbackMode">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="settings-group">
                    <h3>Questions</h3>
                    <div class="settings-option">
                        <div class="number-option">
                            <label for="questionCount">Number of Questions</label>
                            <input type="number" id="questionCount" class="number-input" min="1" value="@Model?.TermMeanings?.Count ?? 1">
                        </div>
                    </div>

                    <div class="settings-option">
                        <label>Answer With</label>
                        <div class="toggle-option">
                            <label for="answerWithTerm">Term</label>
                            <label class="toggle-switch">
                                <input type="radio" id="answerWithTerm" name="answerWith" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                        <div class="toggle-option">
                            <label for="answerWithDefinition">Definition</label>
                            <label class="toggle-switch">
                                <input type="radio" id="answerWithDefinition" name="answerWith">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>

                <h3>Question Types</h3>
                <div class="settings-option">
                    <div class="toggle-option">
                        <label for="writtenType">Written</label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="writtenType" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="toggle-option">
                        <label for="multipleChoiceType">Multiple Choice</label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="multipleChoiceType" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="toggle-option">
                        <label for="trueFalseType">True/False</label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="trueFalseType">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button class="save-button" onclick="saveQuizSettings()">Save Settings</button>
            </div>
        </div>
    </div>
</content>
<script type="text/javascript">
    const serverCards = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.TermMeanings ?? new List<TermMeaningViewModel>()));
    document.addEventListener("DOMContentLoaded", function() {
        initialize(serverCards);
    });
</script>
<script src="@Url.Content("~/js/flashcards/display-page.js")"></script>
</body>
</html>